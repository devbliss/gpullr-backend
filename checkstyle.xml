<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
  <property name="charset" value="UTF-8"/>

  <property name="severity" value="error"/>

  <!-- Checks for whitespace                               -->
  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
  </module>

  <!-- properties-files may not contain duplicate entries in a single file. Default file extension is .properties -->
  <module name="UniqueProperties"/>

  <module name="TreeWalker">

    <!-- avoid bulk imports like com.devbliss.package.* -->
    <module name="AvoidStarImport"/>

    <!-- Finds nested blocks, i.e. blocks that are used freely in the code.  -->
    <module name="AvoidNestedBlocks"/>

    <!-- Check that the default is after all the cases in a switch statement. -->
    <module name="DefaultComesLast"/>

    <!-- Checks that classes that override equals() also override hashCode(). -->
    <module name="EqualsHashCode"/>

    <!-- Detects empty statements (standalone ';'). -->
    <module name="EmptyStatement"/>

    <!-- Checks for blank line separators. -->
    <module name="EmptyLineSeparator"/>

    <!-- Checks for fall through in switch statements -->
    <module name="FallThrough"/>

    <!-- Checks correct indentation of Java Code. -->
<!-- disabled until https://github.com/checkstyle/checkstyle/issues/281 is fixed
    <module name="Indentation">
      <property name="basicOffset" value="2"/>
      <property name="caseIndent" value="2"/>
      <property name="throwsIndent" value="4"/>
      <property name="lineWrappingIndentation" value="4"/>
      <property name="arrayInitIndent" value="2"/>
    </module>
-->
    
    <module name="ImportOrder">
      <property name="ordered" value="true"/>
      <property name="option" value="above"/>
    </module>

    <!--  java.lang.Error or java.lang.RuntimeException is almost never acceptable. -->
    <module name="IllegalThrows"/>

    <!-- Checks for imports from a set of illegal packages. By default, the check rejects all sun.* packages -->
    <module name="IllegalImport"/>

    <!-- Catching java.lang.Throwable, java.lang.Error or java.lang.RuntimeException is almost never acceptable.
        We do accept java.lang.Exception here because some frameworks might want you to throw it -->
    <module name="IllegalCatch">
      <property name="illegalClassNames" value="java.lang.Throwable, java.lang.Error, java.lang.RuntimeException"/>
    </module>

    <!-- Checks that local, non-final variable names conform -->
    <module name="LocalVariableName">
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
      <property name="allowOneCharVarInForLoop" value="true"/>
      <message key="name.invalidPattern"
               value="Local variable name ''{0}'' must match pattern ''{1}''."/>
    </module>

    <!-- Checks for long lines. -->
    <module name="LineLength">
      <property name="max" value="120"/>
      <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <!-- Checks the placement of left curly braces on types, methods and other blocks: -->
    <module name="LeftCurly">
      <property name="maxLineLength" value="120"/>
    </module>

    <!-- Checks that each variable declaration is in its own statement and on its own line. -->
    <module name="MultipleVariableDeclarations"/>

    <!-- Checks for multiple occurrences of the same string literal within a single file. -->
    <module name="MultipleStringLiterals"/>

    <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3. -->
    <module name="ModifierOrder"/>

    <!-- Checks that switch statement has "default" clause. -->
    <module name="MissingSwitchDefault"/>

    <!-- Checks that method names conform -->
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
      <message key="name.invalidPattern"
               value="Method name ''{0}'' must match pattern ''{1}''."/>
    </module>

    <!-- Checks that chosen statements are not line-wrapped. -->
    <module name="NoLineWrap"/>

    <!-- Checks for braces around code blocks. -->
    <module name="NeedBraces"/>

    <!-- Checks that the outer type name and the file name match. -->
    <module name="OuterTypeFilename"/>

    <!-- Checks that each top-level class, interfaces or enum resides in a source file of its own. -->
    <module name="OneTopLevelClass"/>

    <!-- Checks there is only one statement per line. -->
    <module name="OneStatementPerLine"/>

    <module name="OverloadMethodsDeclarationOrder"/>

    <!-- Ensures there is a package declaration and (optionally) in the correct directory. -->
    <module name="PackageDeclaration"/>

    <!-- Checks the placement of right curly braces. -->
    <module name="RightCurly"/>
    <module name="RightCurly">
      <property name="option" value="alone"/>
      <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
    </module>

    <!-- Checks for redundant modifiers in interface and annotation definitions. -->
    <module name="RedundantModifier"/>

    <!-- Checks for imports that are redundant. -->
    <module name="RedundantImport" />

    <!-- Checks that string literals are not used with == or != -->
    <module name="StringLiteralEquality"/>

    <!-- Checks line wrapping with separators. -->
    <module name="SeparatorWrap">
      <property name="tokens" value="DOT"/>
      <property name="option" value="nl"/>
    </module>

    <module name="SuperFinalize"/>

    <!-- Checks that long constants are defined with an upper ell. -->
    <module name="UpperEll"/>

    <!-- Checks for unused import statements. -->
    <module name="UnusedImports">
      <property name="processJavadoc" value="true" />
    </module>

    <!-- Checks for empty blocks. -->
    <module name="EmptyBlock">
      <property name="option" value="TEXT"/>
    </module>
  </module>
</module>
